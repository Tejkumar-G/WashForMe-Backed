# Generated by Django 3.2.18 on 2023-03-21 10:55

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone', models.CharField(max_length=17, null=True, unique=True, validators=[django.core.validators.RegexValidator(message='Phone number must be entered in the format +919999999999. Up to 10 digits allowed.', regex='^((\\+91?)|\\+)?[6-9][0-9]{9}$')], verbose_name='Phone')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DeliverySchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('available_quota', models.PositiveIntegerField()),
                ('filled_quota', models.PositiveIntegerField(default=0)),
                ('date', models.DateField()),
                ('schedule_completed', models.BooleanField(default=False)),
                ('available', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='PhoneOTP',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone', models.CharField(max_length=17, unique=True, validators=[django.core.validators.RegexValidator(message='Phone number must be entered in the format +919999999999. Up to 10 digits allowed.', regex='^((\\+91?)|\\+)?[6-9][0-9]{9}$')])),
                ('otp', models.CharField(blank=True, max_length=9, null=True)),
                ('count', models.IntegerField(default=0, help_text='Number of otp_sent')),
                ('validated', models.BooleanField(default=False, help_text='If it is true, that means user have validate otp correctly in second API')),
                ('otp_session_id', models.CharField(default='', max_length=120, null=True)),
                ('email', models.CharField(blank=True, default=None, max_length=50, null=True, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='PickUpSchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('available_quota', models.PositiveIntegerField()),
                ('filled_quota', models.PositiveIntegerField(default=0)),
                ('date', models.DateField()),
                ('schedule_completed', models.BooleanField(default=False)),
                ('available', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='WashCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=55, unique=True)),
                ('image', models.FileField(blank=True, null=True, upload_to='media/')),
                ('extra_per_item', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='WashItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=55, unique=True)),
                ('image', models.FileField(blank=True, null=True, upload_to='media/')),
                ('price', models.IntegerField()),
                ('count', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='WashCategoryItemRelation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='in_app.washcategory')),
                ('items', models.ManyToManyField(to='in_app.WashItem')),
            ],
        ),
        migrations.AddField(
            model_name='washcategory',
            name='items',
            field=models.ManyToManyField(blank=True, to='in_app.WashItem'),
        ),
        migrations.CreateModel(
            name='UserWashRelation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('wash_category_relations', models.ManyToManyField(to='in_app.WashCategoryItemRelation')),
            ],
        ),
        migrations.CreateModel(
            name='PickUpSlotBook',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pick_up_slot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='in_app.pickupschedule')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('user_wash_relation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='in_app.userwashrelation')),
            ],
        ),
        migrations.CreateModel(
            name='ItemWithCount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count', models.IntegerField(default=0)),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='in_app.washitem')),
            ],
        ),
        migrations.CreateModel(
            name='BookDeliverySlot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('delivery_slot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='in_app.deliveryschedule')),
                ('pick_up_slot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='in_app.pickupslotbook')),
            ],
        ),
    ]
